package functions;

import java.io.BufferedWriter;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.Duration;
import java.util.logging.Logger;
import java.util.HashMap;

import org.apache.commons.math3.distribution.ExponentialDistribution;

import com.google.cloud.functions.HttpFunction;
import com.google.cloud.functions.HttpRequest;
import com.google.cloud.functions.HttpResponse;

public class Logic implements HttpFunction {
	private static final Logger logger = Logger.getLogger("$f.getName()");
	private static ThreadMXBean mgm = ManagementFactory.getThreadMXBean();
	private static HttpClient client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(180)).build();
	private HttpResponse response = null;
	private HashMap<String, Boolean> act_exec=new HashMap<String, Boolean>();

	/*
	 * activities
	 */
	#foreach ( $act in $f.getActivities() )
	public void $act.getName()(){
		this.act_exec.put("$act.getName()", true);
		this.doWork($act.getDemand());
		#if ($act.getCall() != $null)
		String url = "https://northamerica-northeast1-modellearning.cloudfunctions.net/$act.getCall().getDest()";
		var getRequest = java.net.http.HttpRequest.newBuilder().uri(URI.create(url)).GET().build();

		try {
			var getResponse = Logic.client.send(getRequest, BodyHandlers.ofString());
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		#end
	}
	#end

	/*
	 * Dnodes
	 */
	#foreach ( $node in $f.getDnodes() )
	public void $node.getName()(){
	#if($node.class.getSimpleName()=="OrNode")
	//TBA OrNode Logic
	#end
	#if($node.class.getSimpleName()=="ForkNode")
	//TBA ForkNode Logic
	#end
	#if($node.class.getSimpleName()=="ReplyNode")
		//ReplyNode Logic
		BufferedWriter writer;
		try {
			writer = this.response.getWriter();
			writer.write("${node.getJoinList().get(0)}[${f.getName()}]");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	#end
	}
	#end

	@Override
	public void service(HttpRequest request, HttpResponse response) throws IOException {
		this.response = response;
		mgm.setThreadCpuTimeEnabled(true);
		
		//execute the entry activity
		${f.getMainAct()}();
		//execetute the decision node of already executed evt
		#foreach ( $node in $f.getDnodes())
		if(this.act_exec.get("${node.getOriginEvt()}")!=null && this.act_exec.get("${node.getOriginEvt()}")) {
		  ${node.getName()}();
		}
		#end
	}

	private void doWork(Double stime) {
		ExponentialDistribution dist = new ExponentialDistribution(stime);
		long delay = Long.valueOf(Math.round(dist.sample() * 1e9));
		long start = mgm.getCurrentThreadCpuTime();
		while ((mgm.getCurrentThreadCpuTime() - start) < delay) {
		}
	}
}
