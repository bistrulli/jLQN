/*
 * generated by Xtext 2.32.0
 */
grammar JLqn;

// Rule Model
ruleModel:
	(
		'G'
		RULE_STRING
		ruleNUMBER
		ruleNAT0
		ruleNAT0
		?
		RULE_REAL
		?
		RULE_ENDLIST
	)?
	'P'
	ruleNAT0
	ruleProcessor
	*
	RULE_ENDLIST
	'T'
	ruleNAT0
	ruleTask
	*
	RULE_ENDLIST
	'E'
	ruleNAT0
	(
		ruleEntryDemand
		    |ruleSynchronousCall
		    |ruleAsynchronousCall
		    |ruleActivityDiagram
		    |ruleEntryArrivalrate
		    |ruleEntryCoeffs
		    |ruleEntryPhases
		    |ruleFanInEntry
		    |ruleFanOutEntry
		    |ruleEntryPriority
		    |ruleEntryTimeLimit
		    |ruleForwardEntry
		    |ruleEntryThinkTime
	)+
	RULE_ENDLIST
	ruleActivityInfo
	*
	ruleInfinityRate
	?
	ruleSolver
	?
	ruleSolVar
	*
	ruleSolSetting
	*
	ruleOutputReq
	?
	ruleExportSetting
	*
;

// Rule NUMBER
ruleNUMBER:
	(
		RULE_ZERO
		    |
		rulePOSITIVEINTORREAL
	)
;

// Rule POSITIVEINTORREAL
rulePOSITIVEINTORREAL:
	(
		RULE_NAT
		    |
		RULE_REAL
	)
;

// Rule NAT0
ruleNAT0:
	(
		RULE_NAT
		    |
		RULE_ZERO
	)
;

// Rule Processor
ruleProcessor:
	'p'
	RULE_ID
	ruleScheduleKind
	ruleNUMBER
	?
	(
		'm'
		ruleNAT0
		    |
		'i'
	)?
	(
		'r'
		ruleNAT0
	)?
	(
		'R'
		ruleNUMBER
	)?
;

// Rule Task
ruleTask:
	't'
	ruleTaskId
	(
		'i'
		ruleTaskEntryName +
		RULE_ENDLIST
		    |
		ruleTaskKind
		ruleTaskEntryName +
		RULE_ENDLIST
		(
			'q'
			ruleNAT0
		)?
		RULE_ID
		ruleNAT0
		?
		(
			'z'
			ruleNUMBER
		)?
		(
			'm'
			ruleNAT0
			    |
			'i'
		)?
	)
	(
		'r'
		ruleNAT0
	)?
;

// Rule TaskId
ruleTaskId:
	RULE_ID
;

// Rule Entry
ruleTaskEntryName:
	RULE_ID
;

// Rule Entry
ruleEntry:
	RULE_ID
;

// Rule EntryDemand
ruleEntryDemand:
	's'
	ruleEntry
	ruleNUMBER
	+
	RULE_ENDLIST
;

// Rule SynchronousCall
ruleSynchronousCall:
	'y'
	RULE_ID
	RULE_ID
	ruleNUMBER
	+
	RULE_ENDLIST
;

// Rule AsynchronousCall
ruleAsynchronousCall:
	'z'
	RULE_ID
	RULE_ID
	ruleNUMBER
	+
	RULE_ENDLIST
;

// Rule ActivityDiagram
ruleActivityDiagram:
	'A'
	ruleEntry
	RULE_ID
;

// Rule EntryArrivalrate
ruleEntryArrivalrate:
	'a'
	RULE_ID
	ruleNUMBER
;

// Rule EntryCoeffs
ruleEntryCoeffs:
	'c'
	RULE_ID
	ruleNUMBER
	+
	RULE_ENDLIST
;

// Rule EntryPhases
ruleEntryPhases:
	'f'
	RULE_ID
	ruleNAT0
	+
	RULE_ENDLIST
;

// Rule FanInEntry
ruleFanInEntry:
	'i'
	RULE_ID
	RULE_ID
	ruleNAT0
	+
	RULE_ENDLIST
;

// Rule FanOutEntry
ruleFanOutEntry:
	'o'
	RULE_ID
	RULE_ID
	ruleNAT0
	+
	RULE_ENDLIST
;

// Rule EntryPriority
ruleEntryPriority:
	'p'
	RULE_ID
	ruleNAT0
;

// Rule EntryTimeLimit
ruleEntryTimeLimit:
	'M'
	RULE_ID
	ruleNUMBER
	+
	RULE_ENDLIST
;

// Rule ForwardEntry
ruleForwardEntry:
	'F'
	RULE_ID
	RULE_ID
	ruleNUMBER
;

// Rule EntryThinkTime
ruleEntryThinkTime:
	'Z'
	RULE_ID
	ruleNUMBER
	+
	RULE_ENDLIST
;

// Rule Activity
ruleActivity:
	RULE_ID
;

// Rule ActivityInfo
ruleActivityInfo:
	('A' RULE_ID )?
	(
		ruleActivityDemand
		|ruleActSyncCall
		|ruleActivityCoeff
		|ruleActivityPhase
		|ruleFanInAct
		|ruleFanOutAct
		|ruleActTimeLimit
		|ruleActAsyncCall
		|ruleActThinkTime
	)+
	ruleActConnections?
	RULE_ENDLIST
;

// Rule ActConnections
ruleActConnections:
	':'
	ruleTransition *
	ruleJoinList
	(
		'->'
		ruleForkList
	)?
;

// Rule ActivityDemand
ruleActivityDemand:
	's'
	ruleActivity
	ruleNUMBER
;

// Rule ActSyncCall
ruleActSyncCall:
	'y'
	RULE_ID
	RULE_ID
	ruleNUMBER
;

// Rule ActivityCoeff
ruleActivityCoeff:
	'c'
	RULE_ID
	ruleNUMBER
;

// Rule ActivityPhase
ruleActivityPhase:
	'f'
	RULE_ID
	ruleNAT0
;

// Rule FanInAct
ruleFanInAct:
	'i'
	RULE_ID
	RULE_ID
	ruleNAT0
;

// Rule FanOutAct
ruleFanOutAct:
	'o'
	RULE_ID
	RULE_ID
	ruleNAT0
;

// Rule ActTimeLimit
ruleActTimeLimit:
	'M'
	RULE_ID
	ruleNUMBER
;

// Rule ActAsyncCall
ruleActAsyncCall:
	'z'
	RULE_ID
	RULE_ID
	ruleNUMBER
;

// Rule ActThinkTime
ruleActThinkTime:
	'Z'
	RULE_ID
	ruleNUMBER
;

// Rule Transition
ruleTransition:
	ruleJoinList
	(
		'->'
		ruleForkList
	)?
	';'
;

// Rule JoinList
ruleJoinList:
	(
		ruleReply
		    |
		ruleAndJoin
		    |
		ruleOrJoin
	)
;

// Rule ListEntry
ruleListEntry:
	','
	RULE_ID
;

// Rule Reply
ruleReply:
	RULE_ID
	(
		'['
		RULE_ID
		ruleListEntry
		*
		']'
	)?
;

// Rule AndRepl
ruleAndRepl:
	'&'
	ruleReply
;

// Rule OrRepl
ruleOrRepl:
	'+'
	ruleReply
;

// Rule AndJoin
ruleAndJoin:
	ruleReply
	ruleAndRepl
	+
;

// Rule OrJoin
ruleOrJoin:
	ruleReply
	ruleOrRepl
	+
;

// Rule ForkList
ruleForkList:
	(
		RULE_ID
		    |
		ruleAndFork
		    |
		ruleOrFork
		    |
		ruleLoop
	)
;

// Rule AndFork
ruleAndFork:
	RULE_ID
	ruleAndAct
	+
;

// Rule AndAct
ruleAndAct:
	'&'
	RULE_ID
;

// Rule OrFork
ruleOrFork:
	'('
	ruleNUMBER
	')'
	RULE_ID
	ruleOrAct
	+
;

// Rule OrAct
ruleOrAct:
	'+'
	'('
	ruleNUMBER
	')'
	RULE_ID
;

// Rule Loop
ruleLoop:
	ruleNUMBER
	'*'
	RULE_ID
	ruleLoopAct
	*
	(
		','
		RULE_ID
	)?
;

// Rule LoopAct
ruleLoopAct:
	','
	ruleNUMBER
	'*'
	RULE_ID
;

// Rule InfinityRate
ruleInfinityRate:
	'#!'
	(
		'infinity rate'
		    |
		'v'
	)
	ruleNUMBER
;

// Rule Solver
ruleSolver:
	'#!'
	'solver'
	'simple'
	?
	ruleSolverKind
;

// Rule SolVar
ruleSolVar:
	(
		'#!'
		    |
		','
	)
	ruleSolVarKind
	ruleNUMBER
;

// Rule SolSetting
ruleSolSetting:
	(
		'#!'
		    |
		','
	)
	ruleSolBoolKind
;

// Rule OutputReq
ruleOutputReq:
	(
		'#!'
		'throughput:'
		'#!'?
		RULE_ID
		+
	)?
	(
		'#!'
		(
			'utilisation:'
			    |
			'utilization:'
		)
		'#!'?
		RULE_ID
		+
	)?
	(
		'#!'
		(
			'responsetime:'
			    |
			'response time:'
		)
		'#!'?
		RULE_ID
		+
	)?
	'#!'?
	RULE_ENDLIST
;

// Rule ExportSetting
ruleExportSetting:
	'#!'
	'export'
	ruleExportKind
	(
		'path'
		RULE_ID
	)?
;

// Rule ExportKind
ruleExportKind:
	(
		'pepa'
		    |
		'matlab'
		    |
		'java_ode'
		    |
		'csv'
		    |
		'result_list'
	)
;

// Rule SolverKind
ruleSolverKind:
	(
		'sim'
		    |
		'old_ode'
		    |
		'ode'
	)
;

// Rule SolVarKind
ruleSolVarKind:
	(
		'stoptime'
		    |
		'solver_abs_tol'
		    |
		'solver_rel_tol'
		    |
		'steady_abs_tol'
		    |
		'steady_rel_tol'
		    |
		'batch_length_factor'
		    |
		'confidence_level'
		    |
		'confidence_percent_error'
	)
;

// Rule SolBoolKind
ruleSolBoolKind:
	(
		'relative steady state'
		    |
		'absolute steady state'
		    |
		'L1-norm steady state'
	)
;

// Rule TaskKind
ruleTaskKind:
	(
		'r'
		    |
		'n'
		    |
		'h'
		    |
		'f'
		    |
		'p'
		    |
		'b'
	)
;

// Rule ScheduleKind
ruleScheduleKind:
	(
		'f'
		    |
		'p'
		    |
		'h'
		    |
		'r'
		    |
		's'
	)
;

RULE_SL_COMMENT : ('#'|'$'|'%') (~('!'|'\n'|'\r') ~('\n'|'\r')*)? {skip();};

fragment RULE_INT : ('0'..'9')+;

RULE_ENDLIST : '-1';

RULE_REAL : (RULE_INT '.' RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)?|RULE_INT ('e'|'E') ('+'|'-')? RULE_INT);

RULE_NAT : '1'..'9' RULE_INT?;

RULE_ZERO : '0';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~('\\'|'"'))* '"'|'\'' ('\\' .|~('\\'|'\''))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*?'*/' {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
