from locust import HttpUser, task, between, events
import queue, time, logging
import locust.stats
import numpy as np
import subprocess

locust.stats.CSV_STATS_INTERVAL_SEC = 1


@events.test_stop.add_listener
def on_test_stop(**kw):
    pass


class SimpleWorkload(HttpUser):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.nreq = 0
        self.act_exec = {}
        self.act_thread = {}
    
    def doWait(self,ttime):
    	delay=np.random.exponential(scale=ttime)
    	time.sleep(delay)
    
    
	#[[#]]#Activities
	#foreach ( $act in $f.getActivities() )
	def $act.getName()(self):
		self.act_exec["$act.getName()"]=True;
		self.doWait($act.getDemand());

		#if ($act.getCall() != $null)
		tgt_url = "$act.getCall().getDest()";
		self.client.get(tgt_url)
		#end
	#end
	
	#[[#]]#Dnodes
	#foreach ( $node in $f.getDnodes() )
	def ${node.getName()}(self):
	#if($node.class.getSimpleName()=="OrNode")
		#if($node.getJoinList().size()>1)
		#[[#]]#JoinNode Logic
		#foreach ( $act in $node.getJoinList())
		self.act_thread["$act"].join();
		#end
		#end
		#[[#]]#OrNode Logic
		label = []
		p = []
		#foreach ( $act in $node.getForkList())
		label.append("$act")
		p.append($node.getProb().get($foreach.index))
		#end
		
		randomChoice = np.random.choice(a=label,p=p)
		#foreach ( $act in $node.getForkList())
		if(randomChoice=="$act"):
			$act()
		#end
	#end
	#if($node.class.getSimpleName()=="ForkNode")
		#[[#]]#ForkNode Logic
		final Logic mainLogic=this;
		String joinEvt="";
		#foreach ( $act in $node.getForkList())
		#if($foreach.index==0)
		joinEvt="${act}";
		#else
		joinEvt+="&${act}";
		#end
		Thread ${act}Thread = new Thread(() -> {
        	//TBA all the activated Dnodes by ${act} to allow a more complex parallel execution
        	//in this way only asynch call are supported
        	mainLogic.$act();
        });
        this.act_thread.put("${act}", ${act}Thread);
        this.act_thread.get("${act}").start();
		#end
		this.act_exec.put(joinEvt, true);
	#end
	#end
    
    @task
    def visit_homepage(self):
 		#[[#]]# execetute the entry activity
 		self.${f.getMainAct()}()
		#foreach ( $node in $f.getDnodes())
		#[[#]]# execetute the decision node of already executed evt
		if(self.act_exec["${node.getOriginEvt()}"]!=None and self.act_exec["${node.getOriginEvt()}"]):
		  self.act_exec["${node.getOriginEvt()}"]=False
		  self.${node.getName()}()
		#end
        
        

if __name__ == "__main__":
    SimpleWorkload().run()
    
