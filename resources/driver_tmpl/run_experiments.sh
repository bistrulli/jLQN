#!/bin/bash

# === Configuration ===
# Path to the CSV file generated by the validation step
VALIDATION_CSV_PATH="./experiments/validation_metrics.csv"

# CSV file to log step times
STEP_TIMES_CSV="./experiments/step_times.csv"

# === Function Definitions ===
# Function to print error messages and exit
error_exit() {
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo "Error: $1"
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    exit 1
}

# Function to print step messages
log_step() {
    echo "--------------------------------------------------"
    echo "[Step $1/$2] $3"
    echo "--------------------------------------------------"
}

# Function to measure and log step duration
measure_step_time() {
    local step_number=$1
    local step_description=$2
    shift 2  # Remove the first two arguments (step_number and step_description)

    local start_time=$(date +%s)

    # Execute the step
    "$@" || error_exit "Step $step_number failed: $*"

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo "$step_number,$duration" >> "$STEP_TIMES_CSV"
    echo "[Step $step_number] Duration: $duration seconds"

    # 1-minute break
    #echo "Taking a 1-minute break..."
    #sleep 60
}

# === Input Argument Handling ===
if [ "$#" -ne 3 ]; then
    error_exit "Invalid number of arguments. Usage: $0 <N_USERS> <DURATION> <UTILIZATION>"
fi

N_USERS=$1
DURATION=$2
UTILIZATION=$3

# Validate if inputs look like positive integers (basic check)
if ! [[ "$N_USERS" =~ ^[1-9][0-9]*$ ]]; then
    error_exit "N_USERS must be a positive integer. Received: '$N_USERS'"
fi
if ! [[ "$DURATION" =~ ^[1-9][0-9]*$ ]]; then
    error_exit "DURATION must be a positive integer. Received: '$DURATION'"
fi

echo "=================================================="
echo "Starting Experiment Sequence"
echo "Parameters: N_USERS=$N_USERS, DURATION=$DURATION seconds"
echo "=================================================="

# Initialize the CSV file
echo "Step,Duration (seconds)" > "$STEP_TIMES_CSV"

# === Experiment Steps ===
# Use '&&' to chain commands: the next command runs only if the previous one succeeded.

# Step 1: Initial system update
log_step 1 8 "Running initial system update (1, 1, 1)..."
measure_step_time 1 "Initial system update" ../update_sys.sh 1 5 5 || error_exit "Step 1 failed: ../update_sys.sh 1 1 1"
echo "[Step 1/8] Completed."

# Step 2: Validation profile run
log_step 2 8 "Running validation profile (1 user, ${DURATION}m)..."
measure_step_time 2 "Validation profile run" ./profile.sh validation 5 "$DURATION" fixed "$UTILIZATION" || error_exit "Step 2 failed: ./profile.sh validation 1 $DURATION fixed $UTILIZATION"
echo "[Step 2/8] Completed. Validation CSV expected at '$VALIDATION_CSV_PATH'"

# Step 3: Update system for NC profile
log_step 3 8 "Updating system for NC profile (1, 400, 1)..."
measure_step_time 3 "Update system for NC profile" ../update_sys.sh 1 400 0 || error_exit "Step 3 failed: ../update_sys.sh 1 400 0"
echo "[Step 3/8] Completed."

log_step 2 8 "Waiting for Validation profile to Cool Down..."
../waitWarmIstance.sh

# Step 4: NC profile run
log_step 4 8 "Running NC profile (${N_USERS} users, ${DURATION}m)..."
measure_step_time 4 "NC profile run" ./profile.sh NC "$N_USERS" "$DURATION" || error_exit "Step 4 failed: ./profile.sh NC $N_USERS $DURATION"
echo "[Step 4/8] Completed."

../waitWarmIstance.sh

# Step 5: Update system for GCR profile
log_step 5 8 "Updating system for GCR profile (80, 400, 0)..."
measure_step_time 5 "Update system for GCR profile" ../update_sys.sh 80 400 0 || error_exit "Step 5 failed: ../update_sys.sh 80 400 0"
echo "[Step 5/8] Completed."

log_step 4 8 "Waiting for NC profile to Cool Down..."
../waitWarmIstance.sh

# Step 6: GCR profile run
log_step 6 8 "Running GCR profile (${N_USERS} users, ${DURATION}m)..."
measure_step_time 6 "GCR profile run" ./profile.sh GCR "$N_USERS" "$DURATION" || error_exit "Step 6 failed: ./profile.sh GCR $N_USERS $DURATION"
echo "[Step 6/8] Completed."

../waitWarmIstance.sh

# Step 7: Prepare and run multi-function update based on validation CSV
log_step 7 8 "Preparing and running multi-function update (WL)..."
measure_step_time 7 "Multi-function update" bash -c "
    # Check if the validation CSV file exists
    if [ ! -f \"$VALIDATION_CSV_PATH\" ]; then
        error_exit \"Step 7 failed: Validation CSV file not found at '$VALIDATION_CSV_PATH'\"
    fi

    # Extract the last column ('ScaledConc'), skipping the header row (NR>1).
    concurrency_args=\$(awk -F, 'NR > 1 {gsub(/\\r\$/,\"\"); print \$NF}' \"$VALIDATION_CSV_PATH\")

    # Check if awk successfully extracted any arguments
    if [ -z \"\$concurrency_args\" ]; then
        error_exit \"Step 7 failed: No 'ScaledConc' arguments extracted from '$VALIDATION_CSV_PATH'. Is the file empty, missing data, or incorrectly formatted?\"
    fi

    # Convert newline-separated args from awk into space-separated args for the script
    echo \"Extracted concurrency arguments for update_all_functions.sh: \$concurrency_args\"
    ../update_all_functions.sh \$concurrency_args || error_exit \"Step 7 failed: ../update_all_functions.sh with extracted arguments\"
" || error_exit "Step 7 failed"
echo "[Step 7/8] Completed."

log_step 6 8 "Waiting for GCR profile to Cool Down..."
../waitWarmIstance.sh

# Step 8: WL profile run
log_step 8 8 "Running WL profile (${N_USERS} users, ${DURATION}m)..."
measure_step_time 8 "WL profile run" ./profile.sh WL "$N_USERS" "$DURATION" || error_exit "Step 8 failed: ./profile.sh WL $N_USERS $DURATION"
echo "[Step 8/8] Completed."

# --- Completion ---
echo "=================================================="
echo "Experiment Sequence Completed Successfully!"
echo "=================================================="

# Calculate total experiment time
total_time=$(awk -F, 'NR > 1 {sum += $2} END {print sum}' "$STEP_TIMES_CSV")
echo "Total Experiment Time: $total_time seconds"
echo "Total Experiment Time: $total_time seconds" >> "$STEP_TIMES_CSV"

exit 0
