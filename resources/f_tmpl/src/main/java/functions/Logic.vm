package functions;

import java.io.BufferedWriter;
import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.Duration;
import java.util.logging.Logger;
import java.util.logging.FileHandler;
import java.util.logging.SimpleFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.List;
import java.util.Map;
import java.lang.Thread;

import java.lang.management.RuntimeMXBean;

import org.apache.commons.math3.distribution.ExponentialDistribution;
import org.apache.commons.math3.distribution.EnumeratedDistribution;
import org.apache.commons.math3.util.Pair;

import com.google.cloud.functions.HttpFunction;
import com.google.cloud.functions.HttpRequest;
import com.google.cloud.functions.HttpResponse;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Timer;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.prometheus.PrometheusMeterRegistry;
import io.micrometer.prometheus.PrometheusConfig;
import io.prometheus.client.exporter.PushGateway;
import java.util.concurrent.TimeUnit;

public class Logic implements HttpFunction {
    private static final Logger logger = Logger.getLogger("$f.getName()");
    private static ThreadMXBean mgm = ManagementFactory.getThreadMXBean();
    private static HttpClient client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(180)).build();
    private HttpResponse response = null;

    private static final String FUNCTION_NAME = "$f.getName()";

    private static final PushGateway pushGateway = new PushGateway("${config.getPrometheusIp()}:9091");

    private static final PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);

    private static final Timer responseTimeTimer = Timer.builder("logic_response_time_seconds")
        .description("Response time in seconds")
        .tag("function_name", FUNCTION_NAME)
        .register(prometheusRegistry);

    private static final Timer cpuTimeTimer = Timer.builder("logic_cpu_time_seconds")
        .description("CPU time used in seconds")
        .tag("function_name", FUNCTION_NAME)
        .register(prometheusRegistry);

    private static final Counter httpRequestsTotal = Counter.builder("http_requests_total")
        .description("Total number of HTTP requests")
        .tag("function_name", FUNCTION_NAME)
        .register(prometheusRegistry);


    static {
        try {
            // Configure the logger with handler and formatter
            FileHandler fh = new FileHandler("$f.getName()" + ".log", true); // Append to the log file
            logger.addHandler(fh);
            SimpleFormatter formatter = new SimpleFormatter();
            fh.setFormatter(formatter);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /*
     * activities
     */
    #foreach ( $act in $f.getActivities() )
    public void $act.getName()(Map<String, Boolean> act_exec) {
        act_exec.put("$act.getName()", true);
        this.doWork($act.getDemand());
        #if ($act.getCall() != $null)
        #if(${config.getTestOption()})
        String url = "http://${config.getRegionName()}-${config.getProjectName()}.cloudfunctions.net/${act.getCall().getDest().toLowerCase()}";
        #else
        String url = "https://${config.getRegionName()}-${config.getProjectName()}.cloudfunctions.net/${act.getCall().getDest().toLowerCase()}";
        #end
        var getRequest = java.net.http.HttpRequest.newBuilder().uri(URI.create(url)).GET().build();

        try {
            var getResponse = Logic.client.send(getRequest, BodyHandlers.ofString());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        #end
        #if ($act.getAsyncCall() != $null)
        #if(${config.getTestOption()})
        String url =  "http://${config.getRegionName()}-${config.getProjectName()}.cloudfunctions.net/${act.getAsyncCall().getDest().toLowerCase()}";
        #else
        String url =  "https://${config.getRegionName()}-${config.getProjectName()}.cloudfunctions.net/${act.getAsyncCall().getDest().toLowerCase()}";
        #end
        var getRequest = java.net.http.HttpRequest.newBuilder().uri(URI.create(url)).GET().build();

        Thread ${act.getAsyncCall().getSource().toLowerCase()}${act.getAsyncCall().getDest().toLowerCase()}Thread = new Thread(() -> {
            try {
                var getResponse = Logic.client.send(getRequest, BodyHandlers.ofString());
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        });
        ${act.getAsyncCall().getSource().toLowerCase()}${act.getAsyncCall().getDest().toLowerCase()}Thread.start();
        #end
    }

    #end

    /*
     * Dnodes
     */
    #foreach ( $node in $f.getDnodes() )
    public void $node.getName()(Map<String, Boolean> act_exec, Map<String, Thread> act_thread){
    #if($node.class.getSimpleName()=="OrNode")
        #if($node.getJoinList().size()>1)
        //JoinNode Logic
        try {
            #foreach ( $act in $node.getJoinList())
            act_thread.get("$act").join();
            #end
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        #end
        // OrNode Logic
        List<Pair<String, Double>> distributionData = new ArrayList<>();
        #foreach ( $act in $node.getForkList())
        distributionData.add(new Pair<>("$act", $node.getProb().get($foreach.index)));
        #end
        EnumeratedDistribution<String> distribution = new EnumeratedDistribution<>(distributionData);
        String randomChoice = distribution.sample();
        #foreach ( $act in $node.getForkList())
        if(randomChoice == "$act"){
            $act(act_exec);
        }
        #end
    #end
    #if($node.class.getSimpleName()=="ForkNode")
        // TBA ForkNode Logic
        final Logic mainLogic = this;
        String joinEvt = "";
        #foreach ( $act in $node.getForkList())
        #if($foreach.index==0)
        joinEvt = "${act}";
        #else
        joinEvt += "&${act}";
        #end
        Thread ${act}Thread = new Thread(() -> {
            // TBA all the activated Dnodes by ${act} to allow a more complex parallel execution
            // in this way only asynch call are supported
            mainLogic.$act(act_exec);
        });
        act_thread.put("${act}", ${act}Thread);
        act_thread.get("${act}").start();
        #end
        act_exec.put(joinEvt, true);
    #end
    #if($node.class.getSimpleName()=="ReplyNode")
        //ReplyNode Logic
        BufferedWriter writer;
        try {
            writer = this.response.getWriter();
            writer.write("${node.getJoinList().get(0)}[${f.getName()}]");
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    #end
    }
    #end

    @Override
    public void service(HttpRequest request, HttpResponse response) throws IOException {
int httpStatusCode = 200; // Default status code

        // Start timers
        Timer.Sample responseTimeSample = Timer.start(prometheusRegistry);
        long startCpuTime = mgm.getCurrentThreadCpuTime();

        try {
            // Handle request
            this.handleRequest(request, response);
        } catch (Exception e) {
            httpStatusCode = 500; // Internal server error
            throw e;
        } finally {
            // Update metrics
            long cpuTimeUsed = mgm.getCurrentThreadCpuTime() - startCpuTime;
            cpuTimeTimer.record(cpuTimeUsed, TimeUnit.NANOSECONDS);
            responseTimeSample.stop(responseTimeTimer);
            httpRequestsTotal.increment();

            if (pushGateway != null) {
                try {
                    Map<String, String> groupingKey = Map.of(
                        "function_name", FUNCTION_NAME,
                        "status_code", String.valueOf(httpStatusCode)
                    );
                    pushGateway.pushAdd(prometheusRegistry.getPrometheusRegistry(), FUNCTION_NAME, groupingKey);
                } catch (IOException e) {
                    logger.warning("Failed to push metrics to PushGateway: " + e.getMessage());
                    //e.printStackTrace();
                }
            }
        }
    }
    
    private void handleRequest(HttpRequest request, HttpResponse response) throws IOException {
        this.response = response;
        mgm.setThreadCpuTimeEnabled(true);
        Long startCpuTime = mgm.getCurrentThreadCpuTime();
        Long startExecTime = System.nanoTime();

        // Create a new act_exec map for this execution
        Map<String, Boolean> act_exec = new ConcurrentHashMap<>();
        HashMap<String, Thread> act_thread = new HashMap<>();
        
        // Execute the entry activity
        ${f.getMainAct()}(act_exec);
        // Execute the decision node of already executed evt
        #foreach ( $node in $f.getDnodes())
        if (act_exec.get("${node.getOriginEvt()}") != null && act_exec.get("${node.getOriginEvt()}")) {
        act_exec.put("${node.getOriginEvt()}", false);
        ${node.getName()}(act_exec, act_thread);
        }
        #end
        
        // Display times in the log
        long cpuTimeUsed = mgm.getCurrentThreadCpuTime() - startCpuTime;
        long elapsedTime = System.nanoTime() - startExecTime;    
        double cpuUtilizationPercentage = (double) cpuTimeUsed / elapsedTime * 100;
        String logstring = String.format("cpu:=%d  rt:=%d  cpu%%:=%.2f", cpuTimeUsed, elapsedTime, cpuUtilizationPercentage);
        Logic.logger.info(logstring);
    }


    private void doWork(Double stime) {
        #if(${config.getSleepOption()})
            boolean isSleep = true; 
        #else
            boolean isSleep = false;
        #end
        if (isSleep) {
            // Simulate work by sleeping for stime seconds
            try {
                long sleepTime = Math.round(stime * 1e3); // Convert stime to milliseconds
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else {
            ExponentialDistribution dist = new ExponentialDistribution(stime);
            long delay = Long.valueOf(Math.round(dist.sample() * 1e9));
            long start = mgm.getCurrentThreadCpuTime();
            while ((mgm.getCurrentThreadCpuTime() - start) < delay) {
            }
        }
        
    }
}
